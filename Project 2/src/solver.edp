include "ffmatlib.idp"
load "gmsh"
real Re = 1e3;
int ntest = 4;

// 1. variational forms
macro Grad(f) [dx(f), dy(f)] //
macro Grad2(fx,fy) [dx(fx), dy(fx), dx(fy), dy(fy)] //
macro Div(fx,fy) (dx(fx) + dy(fy)) //
macro UGrad(bx,by, f) [bx,by]' * Grad(f) //
macro UGrad2(bx,by, fx,fy) [UGrad(bx,by,fx), UGrad(bx,by,fy)] //
macro Curl(fx, fy) (dx(fy)-dy(fx))//


string[int] cases = ["CACTUS", "CW", "WS", "CAULIFLOWER"];
string[int] names = ["CC", "CW", "WS", "CL"];
real[int] maxvel   = [0.0,0.0,0.0,0.0];
real[int] meanvel  = [0.0,0.0,0.0,0.0];
real[int] meancurl = [0.0,0.0,0.0,0.0];
real[int] area = [0.0,0.0,0.0,0.0];

for(int i = 0; i<ntest; i++){
	string case = cases[i];
	string name = names[i];

	// 2. finite element spaces
	mesh Th = gmshload("../geometries/"+case+"_20.msh");
	//plot(Th, cmm = "Mesh");
	fespace Vh(Th, [P2, P2]);
	fespace Qh(Th, P1);
	fespace Wh(Th, P0);

	Vh [ux0h, uy0h],
	[uxh, uyh],
   	[vxh, vyh],
   	[incrx, incry];
	Qh p0h, ph, qh, incrp;
	Wh ux, uy, p;

	problem newton([uxh, uyh, ph], [vxh, vyh, qh]) =
    	int2d(Th)(UGrad2(ux0h, uy0h, uxh, uyh)' * [vxh, vyh]
        	      + UGrad2(uxh, uyh, ux0h, uy0h)' * [vxh, vyh]
            	  + (Grad2(uxh, uyh)' * Grad2(vxh, vyh)) / Re
              	- ph * Div(vxh, vyh) 
              	+ Div(uxh, uyh) * qh)
    	- int2d(Th)(UGrad2(ux0h, uy0h, ux0h, uy0h)' * [vxh, vyh])
    	+ on(2, uxh=0.0, uyh=-0.3)
    	+ on(2, ph=0.0)
    	+ on(1, uxh=0.0, uyh=0.0);

	func int step() {
    	// input: [ux0h, uy0h, p0h] -> old solution
    	// output: [uxh, uyh, ph] -> new solution
    	newton;
    	return 0;
	}

	func real error() {
    	// input: [ux0h, uy0h, p0h] -> old solution
    	// input: [uxh, uyh, ph] -> new solution

    	real pmean = int2d(Th)(ph);
    	ph = ph - pmean;

    	real p0mean = int2d(Th)(p0h);

    	incrx[] = uxh[];
    	incrx[] -= ux0h[];

    	real erru = int2d(Th)(dx(incrx)^2 + dy(incrx)^2 +
            	              dx(incry)^2 + dy(incry)^2 +
        	                  incrx^2 + incry^2);
    	real errp = int2d(Th)((incrp)^2);
    	real normu = int2d(Th)(dx(ux0h)^2 + dy(ux0h)^2 +
            	               dx(uy0h)^2 + dy(uy0h)^2 +
        	                   ux0h^2 + uy0h^2);
    	real normp = int2d(Th)((p0h-p0mean)^2);

    	return sqrt(erru / normu) + sqrt(errp / normp);
	}

	// 4. nonlinear solver
	int nbiter = 15;
	real eps = 1.e-3;

	ux0h[] = 0.0;
	p0h  = 0.0;
	step();
	ux0h[] = uxh[];
	p0h = ph;

	int iter = 0;
	for (iter = 0; iter < nbiter; ++iter) {
    	int errc = step();
    	if (errc != 0) {
        	cout << "ERROR: iteration " << iter << " failed!" << endl;
        	break;
    	}
    	if (error() < eps)
        	break;
    	ux0h[] = uxh[];
		p0h = ph;
	}
	
	// 8. solution
	ux = uxh;
	uy = uyh;
	p = ph;
	//plot(ph , nbiso=100, fill=1, wait=1, cmm=case + " Pressure");
	//plot(uxh, nbiso=100, fill=1, wait=1, value = true, cmm=name + " Velocity X");
	//plot(uyh, nbiso=100, fill=1, wait=1, value = true, cmm=name + " Velocity Y");
	plot(ux, nbiso=100, fill=1, wait=1, value = true, cmm=name + " Velocity UX");
	plot(uy, nbiso=100, fill=1, wait=1, value = true, cmm=name + " Velocity UY");
	//plot([ux0h, uy0h],   fill=1, wait=1, value=true, cmm=case + " Velocity");
	meanvel[i]  = int2d(Th)(sqrt(ux^2 + uy^2)) / int2d(Th)(1);
	maxvel[i]   = ux[].max;	
	meancurl[i] = int2d(Th)(Curl(uxh,uyh)) / int2d(Th)(1);
	area[i] = int2d(Th)(1);

	//Save P2 Data
	ffSaveData(uxh,"../data/vel_x_"+name+".txt");
	ffSaveData(uyh,"../data/vel_y_"+name+".txt");
	ffSaveData2(ux0h, uy0h,"../data/val_P2_"+name+".txt");
	//Save P0 Data
	ffSaveData(ux,"../data/vel_ux_"+name+".txt");
	ffSaveData(uy,"../data/vel_uy_"+name+".txt");
	ffSaveData2(ux, uy,"../data/val_P0_"+name+".txt");
}


cout << "Test Cases: " << names << endl;
cout << "Mean velocity: " << meanvel << endl;
cout << "Max velocity: " << maxvel<< endl;
cout << "Mean curl: " << meancurl << endl;
cout << "Area: " << area << endl;